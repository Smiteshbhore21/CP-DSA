This program counts "almost prime" numbers between 1 and \( n \), where an almost prime number is defined as a number with exactly **two distinct prime divisors**. The program begins by reading an integer \( n \) as input. It then iterates through all numbers from 2 to \( n \). For each number, it calculates the number of distinct prime divisors using the `countPrimeDivisors` method.The `countPrimeDivisors` method works by iterating through all numbers from 2 to the given number. If the current number is a divisor and is also prime (checked using the `isPrime` method), it increments a counter. The `isPrime` method checks whether a number is prime by testing divisibility from 2 up to the square root of the number. If the count of prime divisors for a number is exactly 2, it is considered almost prime, and the program increments a counter.Finally, the total count of almost prime numbers is printed. For example, for \( n = 10 \), the almost prime numbers are 6 (\( 2 \times 3 \)) and 10 (\( 2 \times 5 \)), so the program outputs 2. This approach is simple and focuses on clarity, using nested loops to check divisors and prime status directly without advanced optimization techniques.
